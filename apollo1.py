import pandas as pd
import numpy as np
import streamlit as st
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import RobustScaler, OneHotEncoder
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import io

# --- Load your dataset ---
df = pd.read_csv(r"C:\Users\divya\OneDrive\Desktop\dataset.csv")

# --- Separating Dependent Features ---
x = df.drop(['target'], axis=1)
y = df['target']

# --- Splitting Dataset ---
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# --- Numerical Pipeline ---
num_column = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
num_pipeline = Pipeline([
    ('scaling', RobustScaler())
])

# --- Categorical Pipeline ---
cat_column = ['cp', 'slope', 'thal']
cat_pipeline = Pipeline([
    ('onehot', OneHotEncoder(drop='first', sparse_output=False))
])

# --- Combine Both Pipelines into Transformer ---
preprocessor = ColumnTransformer([
    ('categorical', cat_pipeline, cat_column),
    ('numerical', num_pipeline, num_column)
], remainder='passthrough')

# --- Complete Pipeline for Extra Trees Classifier ---
et_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('algo', ExtraTreesClassifier(random_state=42, n_jobs=-1))
])

# --- Fit the model ---
et_pipeline.fit(x_train, y_train)

# --- Function to analyze new patient data ---
def analyze_new_patient_data(new_data):
    # Ensure new_data is a DataFrame
    if isinstance(new_data, pd.DataFrame):
        predictions = et_pipeline.predict(new_data)
        return predictions
    else:
        raise ValueError("Input data must be a pandas DataFrame.")

# Function to generate an image with the prediction report
def generate_image(values, result, name):
    img = Image.new('RGB', (600, 800), color=(255, 255, 255))  
    d = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("arialbd.ttf", 18)
        large_font = ImageFont.truetype("arialbd.ttf", 50)
    except:
        font = ImageFont.load_default()
        large_font = ImageFont.load_default()

    heart_color = (255, 182, 193)
    heart_points = [(300, 220), (350, 170), (400, 220), (400, 280), (300, 380), (200, 280), (200, 220)]
    d.polygon(heart_points, fill=heart_color)

    title_text = "Heart Disease Prediction Report"
    underline_text = "-" * 50
    title_bbox = d.textbbox((0, 0), title_text, font=font)
    underline_bbox = d.textbbox((0, 0), underline_text, font=font)
    title_x = (img.width - (title_bbox[2] - title_bbox[0])) // 2
    underline_x = (img.width - (underline_bbox[2] - underline_bbox[0])) // 2
    d.text((title_x, 100), title_text, font=font, fill=(0, 0, 0))
    d.text((underline_x, 130), underline_text, font=font, fill=(0, 0, 0))

    y_text = 160
    for key, value in values.items():
        d.text((10, y_text), f"{key}: {value}", font=font, fill=(0, 0, 0))
        y_text += 30
    d.text((10, y_text), f"Result: {result}", font=font, fill=(0, 0, 0))

    now = datetime.now()
    d.text((10, y_text + 40), f"Date: {now.strftime('%Y-%m-%d')}", font=font, fill=(0, 0, 0))
    d.text((10, y_text + 70), f"Time: {now.strftime('%H:%M:%S')}", font=font, fill=(0,  0, 0, 0))
    d.text((10, y_text + 100), f"Report Generated by: {name}", font=font, fill=(0, 0, 0))

    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)

    return img_buffer

# Login function
def login(username, password):
    return username == "heartdisease" and password == "heart@123"

# Main app function
def main():
    st.title("Heart Disease Prediction")

    st.markdown(
        """
        <style>
        .stApp {
            background-image: url('https://img.freepik.com/premium-photo/blur-short-white-hospital-walkway-background_7180-2422.jpg');
            background-size: cover;
            background-attachment: fixed;
            color: black;
            font-weight: bold;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # Sidebar for navigation
    option = st.sidebar.selectbox("Select a page:", ["Home", "Heart Disease Prediction", "About", "Logout"])

    if option == "Logout":
        st.session_state.logged_in = False
        st.experimental_set_query_params(page="Home")
        st.success("Logged out successfully.")
        return

    if option == "Home":
        st.image("https://cdn.pixabay.com/photo/2023/09/05/08/02/earth-8234588_1280.jpg", caption="Heart Health Matters")
        
        st.write(""" 
        ### Overview 
        This app uses machine learning models to predict the risk of heart disease based on several health metrics. It allows you to upload patient data, generate predictions, and provides a detailed report.

        ### Features:
        - Predicts heart disease based on various health metrics.
        - Supports multiple machine learning models for better accuracy.
        - Allows CSV data upload for bulk predictions.
        - Generates a customized report with results.

        ### Understanding Heart Disease Risk 
        Heart disease refers to several types of heart conditions, with coronary artery disease being the most common. Factors like high blood pressure, high cholesterol, smoking, and obesity significantly increase the risk of heart disease. Family history, age, and gender also play a role.

        **Risk Factors:**
        - High blood pressure and cholesterol
        - Smoking
        - Lack of physical activity
        - Poor diet and excessive alcohol
        - Obesity
        - Diabetes

        ### Protecting Your Heart:
        1. **Exercise Regularly**: Aim for at least 30 minutes of moderate exercise most days of the week.
        2. **Eat a Healthy Diet**: Include more fruits, vegetables, whole grains, and healthy fats like omega-3 fatty acids.
        3. **Quit Smoking**: Smoking is one of the leading causes of heart disease. Quitting helps improve heart health rapidly.
        4. **Manage Stress**: Chronic stress can raise blood pressure. Practice relaxation techniques like meditation or yoga.
        5. **Regular Health Check-ups**: Get regular screenings for blood pressure, cholesterol, and diabetes.
        6. **Maintain a Healthy Weight**: Reducing obesity reduces the risk of heart disease significantly.
        """)

        st.info("Login with **username**: `heartdisease` and **password**: `heart@123` to start using the app.")

    elif option == "Heart Disease Prediction":
        if "logged_in" not in st.session_state:
            st.session_state.logged_in = False

        if not st.session_state.logged_in:
            st.subheader("Login to Continue")
            username = st.text_input("Username", placeholder="Enter Username")
            password = st.text_input("Password", type="password", placeholder="Enter Password")

            if st.button("Login"):
                if login(username, password):
                    st.session_state.logged_in = True
                    st.success("Logged in successfully!")
                else:
                    st.error("‚ùå Invalid credentials")
        else:
            st.subheader("Enter Patient Details")
            name = st.text_input("Patient Name", placeholder="Enter patient's full name") 
            age = st.number_input("Age", min_value=1, max_value=100)
            cp = st.number_input("Chest Pain Type (cp)", min_value=0.0, max_value=5.0)
            trestbps = st.number_input("Resting Blood Pressure (trestbps)", min_value=94.0, max_value=200.0)
            chol = st.number_input("Serum Cholesterol (chol)", min_value=126.0, max_value=417.0)
            thalach = st.number_input("Max Heart Rate (thalach)", min_value=71.0, max_value=192.0)
            old peak = st.number_input("ST Depression (oldpeak)", min_value=0.0, max_value=5.6)
            slope = st.number_input("Slope of Peak Exercise (slope)", min_value=0.0, max_value=2.0)
            thal = st.number_input("Thalassemia (thal)", min_value=1.0, max_value=3.0)

            if st.button("Submit"):
                if not name.strip():
                    st.error("‚ùå Please enter the patient's name.")
                    return

                # Prepare new patient data for prediction
                new_patient_data = pd.DataFrame({
                    'age': [age],
                    'cp': [cp],
                    'trestbps': [trestbps],
                    'chol': [chol],
                    'thalach': [thalach],
                    'oldpeak': [oldpeak],
                    'slope': [slope],
                    'thal': [thal]
                })

                # Analyze new patient data
                result = analyze_new_patient_data(new_patient_data)
                prediction_result = "‚ù§Ô∏è Heart disease predicted, Please consult a Cardiologist" if result[0] == 1 else "üí™ Person is healthy"

                st.success(prediction_result)

                values = {
                    "Name": name, 
                    "Age": age,
                    "Chest Pain Type (cp)": cp,
                    "Resting Blood Pressure (trestbps)": trestbps,
                    "Serum Cholesterol (chol)": chol,
                    "Max Heart Rate (thalach)": thalach,
                    "ST Depression (oldpeak)": oldpeak,
                    "Slope of Peak Exercise (slope)": slope,
                    "Thalassemia (thal)": thal
                }
                report_image = generate_image(values, prediction_result, "ML")
                st.image(report_image, caption='Heart Disease Prediction Report', use_column_width=True)

                # Add a download button for the report
                st.download_button(
                    label="Download Report",
                    data=report_image,
                    file_name='heart_disease_prediction_report.png',
                    mime='image/png'
                )

    elif option == "About":
        st.header("About the App")
        st.write("""
        This Heart Disease Prediction app uses machine learning models to predict the possibility of heart disease based on various health metrics.
        - Log in with username - heartdisease and Password - heart@123
        - Enter the patient's details to get predictions.
        - Get the patient's report.
        """)

# Run the main function
if __name__ == "__main__":
    main()
